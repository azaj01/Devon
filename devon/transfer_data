"""\n    sphinx.ext.napoleon\n    ~~~~~~~~~~~~~~~~~~~\n\n    Support for NumPy and Google style docstrings.\n\n    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n"""\n\nfrom typing import Any, Dict, List\n\nfrom sphinx import __display_version__ as __version__\nfrom sphinx.application import Sphinx\nfrom sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\nfrom sphinx.util import inspect\n\n\nclass Config:\n    """Sphinx napoleon extension settings in `conf.py`.\n\n    Listed below are all the settings used by napoleon and their default\n    values. These settings can be changed in the Sphinx `conf.py` file. Make\n    sure that "sphinx.ext.napoleon" is enabled in `conf.py`::\n\n        # conf.py\n\n        # Add any Sphinx extension module names here, as strings\n        extensions = [\'sphinx.ext.napoleon\']\n\n        # Napoleon settings\n        napoleon_google_docstring = True\n        napoleon_numpy_docstring = True\n        napoleon_include_init_with_doc = False\n        napoleon_include_private_with_doc = False\n        napoleon_include_special_with_doc = False\n        napoleon_use_admonition_for_examples = False\n        napoleon_use_admonition_for_notes = False\n        napoleon_use_admonition_for_references = False\n        napoleon_use_ivar = False\n        napoleon_use_param = True\n        napoleon_use_rtype = True\n        napoleon_use_keyword = True\n        napoleon_preprocess_types = False\n        napoleon_type_aliases = None\n        napoleon_custom_sections = None\n        napoleon_attr_annotations = True\n\n    .. _Google style:\n       https://google.github.io/styleguide/pyguide.html\n    .. _NumPy style:\n       https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n\n    Attributes\n    ----------\n    napoleon_google_docstring : :obj:`bool` (Defaults to True)\n        True to parse `Google style`_ docstrings. False to disable support\n        for Google style docstrings.\n    napoleon_numpy_docstring : :obj:`bool` (Defaults to True)\n        True to parse `NumPy style`_ docstrings. False to disable support\n        for NumPy style docstrings.\n    napoleon_include_init_with_doc : :obj:`bool` (Defaults to False)\n        True to list ``__init___`` docstrings separately from the class\n        docstring. False to fall back to Sphinx\'s default behavior, which\n        considers the ``__init___`` docstring as part of the class\n        documentation.\n\n        **If True**::\n\n            def __init__(self):\n                \\"\\"\\"\n                This will be included in the docs because it has a docstring\n                \\"\\"\\"\n\n            def __init__(self):\n                # This will NOT be included in the docs\n\n    napoleon_include_private_with_doc : :obj:`bool` (Defaults to False)\n        True to include private members (like ``_membername``) with docstrings\n        in the documentation. False to fall back to Sphinx\'s default behavior.\n\n        **If True**::\n\n            def _included(self):\n                \\"\\"\\"\n                This will be included in the docs because it has a docstring\n                \\"\\"\\"\n                pass\n\n            def _skipped(self):\n                # This will NOT be included in the docs\n                pass\n\n    napoleon_include_special_with_doc : :obj:`bool` (Defaults to False)\n        True to include special members (like ``__membername__``) with\n        docstrings in the documentation. False to fall back to Sphinx\'s\n        default behavior.\n\n        **If True**::\n\n            def __str__(self):\n                \\"\\"\\"\n                This will be included in the docs because it has a docstring\n                \\"\\"\\"\n                return unicode(self).encode(\'utf-8\')\n\n            def __unicode__(self):\n                # This will NOT be included in the docs\n                return unicode(self.__class__.__name__)\n\n    napoleon_use_admonition_for_examples : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for the **Example** and\n        **Examples** sections. False to use the ``.. rubric::`` directive\n        instead. One may look better than the other depending on what HTML\n        theme is used.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Example\n            -------\n            This is just a quick example\n\n        **If True**::\n\n            .. admonition:: Example\n\n               This is just a quick example\n\n        **If False**::\n\n            .. rubric:: Example\n\n            This is just a quick example\n\n    napoleon_use_admonition_for_notes : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for **Notes** sections.\n        False to use the ``.. rubric::`` directive instead.\n\n        Note\n        ----\n        The singular **Note** section will always be converted to a\n        ``.. note::`` directive.\n\n        See Also\n        --------\n        :attr:`napoleon_use_admonition_for_examples`\n\n    napoleon_use_admonition_for_references : :obj:`bool` (Defaults to False)\n        True to use the ``.. admonition::`` directive for **References**\n        sections. False to use the ``.. rubric::`` directive instead.\n\n        See Also\n        --------\n        :attr:`napoleon_use_admonition_for_examples`\n\n    napoleon_use_ivar : :obj:`bool` (Defaults to False)\n        True to use the ``:ivar:`` role for instance variables. False to use\n        the ``.. attribute::`` directive instead.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Attributes\n            ----------\n            attr1 : int\n                Description of `attr1`\n\n        **If True**::\n\n            :ivar attr1: Description of `attr1`\n            :vartype attr1: int\n\n        **If False**::\n\n            .. attribute:: attr1\n\n               Description of `attr1`\n\n               :type: int\n\n    napoleon_use_param : :obj:`bool` (Defaults to True)\n        True to use a ``:param:`` role for each function parameter. False to\n        use a single ``:parameters:`` role for all the parameters.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Parameters\n            ----------\n            arg1 : str\n                Description of `arg1`\n            arg2 : int, optional\n                Description of `arg2`, defaults to 0\n\n        **If True**::\n\n            :param arg1: Description of `arg1`\n            :type arg1: str\n            :param arg2: Description of `arg2`, defaults to 0\n            :type arg2: int, optional\n\n        **If False**::\n\n            :parameters: * **arg1** (*str*) --\n                           Description of `arg1`\n                         * **arg2** (*int, optional*) --\n                           Description of `arg2`, defaults to 0\n\n    napoleon_use_keyword : :obj:`bool` (Defaults to True)\n        True to use a ``:keyword:`` role for each function keyword argument.\n        False to use a single ``:keyword arguments:`` role for all the\n        keywords.\n\n        This behaves similarly to  :attr:`napoleon_use_param`. Note unlike\n        docutils, ``:keyword:`` and ``:param:`` will not be treated the same\n        way - there will be a separate "Keyword Arguments" section, rendered\n        in the same fashion as "Parameters" section (type links created if\n        possible)\n\n        See Also\n        --------\n        :attr:`napoleon_use_param`\n\n    napoleon_use_rtype : :obj:`bool` (Defaults to True)\n        True to use the ``:rtype:`` role for the return type. False to output\n        the return type inline with the description.\n\n        This `NumPy style`_ snippet will be converted as follows::\n\n            Returns\n            -------\n            bool\n                True if successful, False otherwise\n\n        **If True**::\n\n            :returns: True if successful, False otherwise\n            :rtype: bool\n\n        **If False**::\n\n            :returns: *bool* -- True if successful, False otherwise\n\n    napoleon_preprocess_types : :obj:`bool` (Defaults to False)\n        Enable the type preprocessor for numpy style docstrings.\n\n    napoleon_type_aliases : :obj:`dict` (Defaults to None)\n        Add a mapping of strings to string, translating types in numpy\n        style docstrings. Only works if ``napoleon_preprocess_types = True``.\n\n    napoleon_custom_sections : :obj:`list` (Defaults to None)\n        Add a list of custom sections to include, expanding the list of parsed sections.\n\n        The entries can either be strings or tuples, depending on the intention:\n          * To create a custom "generic" section, just pass a string.\n          * To create an alias for an existing section, pass a tuple containing the\n            alias name and the original, in that order.\n\n        If an entry is just a string, it is interpreted as a header for a generic\n        section. If the entry is a tuple/list/indexed container, the first entry\n        is the name of the section, the second is the section key to emulate.\n\n    napoleon_attr_annotations : :obj:`bool` (Defaults to True)\n        Use the type annotations of class attributes that are documented in the docstring\n        but do not have a type in the docstring.\n\n    """\n    _config_values = {\n        \'napoleon_google_docstring\': (True, \'env\'),\n        \'napoleon_numpy_docstring\': (True, \'env\'),\n        \'napoleon_include_init_with_doc\': (False, \'env\'),\n        \'napoleon_include_private_with_doc\': (False, \'env\'),\n        \'napoleon_include_special_with_doc\': (False, \'env\'),\n        \'napoleon_use_admonition_for_examples\': (False, \'env\'),\n        \'napoleon_use_admonition_for_notes\': (False, \'env\'),\n        \'napoleon_use_admonition_for_references\': (False, \'env\'),\n        \'napoleon_use_ivar\': (False, \'env\'),\n        \'napoleon_use_param\': (True, \'env\'),\n        \'napoleon_use_rtype\': (True, \'env\'),\n        \'napoleon_use_keyword\': (True, \'env\'),\n        \'napoleon_preprocess_types\': (False, \'env\'),\n        \'napoleon_type_aliases\': (None, \'env\'),\n        \'napoleon_custom_sections\': (None, \'env\'),\n        \'napoleon_attr_annotations\': (True, \'env\'),\n    }\n\n    def __init__(self, **settings: Any) -> None:\n        for name, (default, rebuild) in self._config_values.items():\n            setattr(self, name, default)\n        for name, value in settings.items():\n            setattr(self, name, value)\n\n\ndef setup(app: Sphinx) -> Dict[str, Any]:\n    """Sphinx extension setup function.\n\n    When the extension is loaded, Sphinx imports this module and executes\n    the ``setup()`` function, which in turn notifies Sphinx of everything\n    the extension offers.\n\n    Parameters\n    ----------\n    app : sphinx.application.Sphinx\n        Application object representing the Sphinx process\n\n    See Also\n    --------\n    `The Sphinx documentation on Extensions\n    <http://sphinx-doc.org/extensions.html>`_\n\n    `The Extension Tutorial <http://sphinx-doc.org/extdev/tutorial.html>`_\n\n    `The Extension API <http://sphinx-doc.org/extdev/appapi.html>`_\n\n    """\n    if not isinstance(app, Sphinx):\n        # probably called by tests\n        return {\'version\': __version__, \'parallel_read_safe\': True}\n\n    _patch_python_domain()\n\n    app.setup_extension(\'sphinx.ext.autodoc\')\n    app.connect(\'autodoc-process-docstring\', _process_docstring)\n    app.connect(\'autodoc-skip-member\', _skip_member)\n\n    for name, (default, rebuild) in Config._config_values.items():\n        app.add_config_value(name, default, rebuild)\n    return {\'version\': __version__, \'parallel_read_safe\': True}\n\n\ndef _patch_python_domain() -> None:\n    try:\n        from sphinx.domains.python import PyTypedField\n    except ImportError:\n        pass\n    else:\n        import sphinx.domains.python\n        from sphinx.locale import _\n        for doc_field in sphinx.domains.python.PyObject.doc_field_types:\n            if doc_field.name == \'parameter\':\n                doc_field.names = (\'param\', \'parameter\', \'arg\', \'argument\')\n                break\n        sphinx.domains.python.PyObject.doc_field_types.append(\n            PyTypedField(\'keyword\', label=_(\'Keyword Arguments\'),\n                         names=(\'keyword\', \'kwarg\', \'kwparam\'),\n                         typerolename=\'obj\', typenames=(\'paramtype\', \'kwtype\'),\n                         can_collapse=True))\n\n\ndef _process_docstring(app: Sphinx, what: str, name: str, obj: Any,\n                       options: Any, lines: List[str]) -> None:\n    """Process the docstring for a given python object.\n\n    Called when autodoc has read and processed a docstring. `lines` is a list\n    of docstring lines that `_process_docstring` modifies in place to change\n    what Sphinx outputs.\n\n    The following settings in conf.py control what styles of docstrings will\n    be parsed:\n\n    * ``napoleon_google_docstring`` -- parse Google style docstrings\n    * ``napoleon_numpy_docstring`` -- parse NumPy style docstrings\n\n    Parameters\n    ----------\n    app : sphinx.application.Sphinx\n        Application object representing the Sphinx process.\n    what : str\n        A string specifying the type of the object to which the docstring\n        belongs. Valid values: "module", "class", "exception", "function",\n        "method", "attribute".\n    name : str\n        The fully qualified name of the object.\n    obj : module, class, exception, function, method, or attribute\n        The object to which the docstring belongs.\n    options : sphinx.ext.autodoc.Options\n        The options given to the directive: an object with attributes\n        inherited_members, undoc_members, show_inheritance and noindex that\n        are True if the flag option of same name was given to the auto\n        directive.\n    lines : list of str\n        The lines of the docstring, see above.\n\n        .. note:: `lines` is modified *in place*\n\n    """\n    result_lines = lines\n    docstring = None  # type: GoogleDocstring\n    if app.config.napoleon_numpy_docstring:\n        docstring = NumpyDocstring(result_lines, app.config, app, what, name,\n                                   obj, options)\n        result_lines = docstring.lines()\n    if app.config.napoleon_google_docstring:\n        docstring = GoogleDocstring(result_lines, app.config, app, what, name,\n                                    obj, options)\n        result_lines = docstring.lines()\n    lines[:] = result_lines[:]\n\n\ndef _skip_member(app: Sphinx, what: str, name: str, obj: Any,\n                 skip: bool, options: Any) -> bool:\n    """Determine if private and special class members are included in docs.\n\n    The following settings in conf.py determine if private and special class\n    members or init methods are included in the generated documentation:\n\n    * ``napoleon_include_init_with_doc`` --\n      include init methods if they have docstrings\n    * ``napoleon_include_private_with_doc`` --\n      include private members if they have docstrings\n    * ``napoleon_include_special_with_doc`` --\n      include special members if they have docstrings\n\n    Parameters\n    ----------\n    app : sphinx.application.Sphinx\n        Application object representing the Sphinx process\n    what : str\n        A string specifying the type of the object to which the member\n        belongs. Valid values: "module", "class", "exception", "function",\n        "method", "attribute".\n    name : str\n        The name of the member.\n    obj : module, class, exception, function, method, or attribute.\n        For example, if the member is the __init__ method of class A, then\n        `obj` will be `A.__init__`.\n    skip : bool\n        A boolean indicating if autodoc will skip this member if `_skip_member`\n        does not override the decision\n    options : sphinx.ext.autodoc.Options\n        The options given to the directive: an object with attributes\n        inherited_members, undoc_members, show_inheritance and noindex that\n        are True if the flag option of same name was given to the auto\n        directive.\n\n    Returns\n    -------\n    bool\n        True if the member should be skipped during creation of the docs,\n        False if it should be included in the docs.\n\n    """\n    has_doc = getattr(obj, \'__doc__\', False)\n    is_member = (what == \'class\' or what == \'exception\' or what == \'module\')\n    if name != \'__weakref__\' and has_doc and is_member:\n        cls_is_owner = False\n        if what == \'class\' or what == \'exception\':\n            qualname = getattr(obj, \'__qualname__\', \'\')\n            cls_path, _, _ = qualname.rpartition(\'.\')\n            if cls_path:\n                try:\n                    if \'.\' in cls_path:\n                        import functools\n                        import importlib\n\n                        mod = importlib.import_module(obj.__module__)\n                        mod_path = cls_path.split(\'.\')\n                        cls = functools.reduce(getattr, mod_path, mod)\n                    else:\n                        cls = inspect.unwrap(obj).__globals__[cls_path]\n                except Exception:\n                    cls_is_owner = False\n                else:\n                    cls_is_owner = (cls and hasattr(cls, name) and  # type: ignore\n                                    name in cls.__dict__)\n            else:\n                cls_is_owner = False\n\n        if what == \'module\' or cls_is_owner:\n            is_init = (name == \'__init__\')\n            is_special = (not is_init and name.startswith(\'__\') and\n                          name.endswith(\'__\'))\n            is_private = (not is_init and not is_special and\n                          name.startswith(\'_\'))\n            inc_init = app.config.napoleon_include_init_with_doc\n            inc_special = app.config.napoleon_include_special_with_doc\n            inc_private = app.config.napoleon_include_private_with_doc\n            if ((is_special and inc_special) or\n                    (is_private and inc_private) or\n                    (is_init and inc_init)):\n                return False\n    return None\n', '/sphinx-doc__sphinx/sphinx/ext/napoleon/docstring.py': '"""\n    sphinx.ext.napoleon.docstring\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n    Classes for docstring parsing and formatting.\n\n\n    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n"""\n\nimport collections\nimport inspect\nimport re\nfrom functools import partial\nfrom typing import Any, Callable, Dict, List, Tuple, Type, Union\n\nfrom sphinx.application import Sphinx\nfrom sphinx.config import Config as SphinxConfig\nfrom sphinx.ext.napoleon.iterators import modify_iter\nfrom sphinx.locale import _, __\nfrom sphinx.util import logging\nfrom sphinx.util.inspect import stringify_annotation\nfrom sphinx.util.typing import get_type_hints\n\nlogger = logging.getLogger(__name__)\n\n_directive_regex = re.compile(r\'\\.\\. \\S+::\')\n_google_section_regex = re.compile(r\'^(\\s|\\w)+:\\s*$\')\n_google_typed_arg_regex = re.compile(r\'(.+?)\\(\\s*(.*[^\\s]+)\\s*\\)\')\n_numpy_section_regex = re.compile(r\'^[=\\-.+?.+?strliststrsphinx.ext.napoleon.Configsphinx.config.Configappappsphinx.ext.napoleon.Configsphinx.application.Sphinxstrstrsphinx.ext.autodoc.Optionsarg1arg2arg1arg2(?P<name>~?[a-zA-Z0-9_.-]+)\' in _type:\n                    field = \'**%s** (%s)%s\' % (_name, _type, separator)\n                else:\n                    field = \'**%s** (*%s*)%s\' % (_name, _type, separator)\n            else:\n                field = \'**%s**%s\' % (_name, separator)\n        elif _type:\n            if \'\')\n                _type = _type[pos + 1:-1]\n            _type = \' \' + _type if _type else \'\'\n            _desc = self._strip_empty(_desc)\n            _descs = \' \' + \'\\n    \'.join(_desc) if any(_desc) else \'\'\n            lines.append(\':raises%s:%s\' % (_type, _descs))\n        if lines:\n            lines.append(\'\')\n        return lines\n\n    def _parse_receives_section(self, section: str) -> List[str]:\n        if self._config.napoleon_use_param:\n            # Allow to declare multiple parameters at once (ex: x, y: int)\n            fields = self._consume_fields(multiple=True)\n            return self._format_docutils_params(fields)\n        else:\n            fields = self._consume_fields()\n            return self._format_fields(_(\'Receives\'), fields)\n\n    def _parse_references_section(self, section: str) -> List[str]:\n        use_admonition = self._config.napoleon_use_admonition_for_references\n        return self._parse_generic_section(_(\'References\'), use_admonition)\n\n    def _parse_returns_section(self, section: str) -> List[str]:\n        fields = self._consume_returns_section()\n        multi = len(fields) > 1\n        if multi:\n            use_rtype = False\n        else:\n            use_rtype = self._config.napoleon_use_rtype\n\n        lines = []  # type: List[str]\n        for _name, _type, _desc in fields:\n            if use_rtype:\n                field = self._format_field(_name, \'\', _desc)\n            else:\n                field = self._format_field(_name, _type, _desc)\n\n            if multi:\n                if lines:\n                    lines.extend(self._format_block(\'          * \', field))\n                else:\n                    lines.extend(self._format_block(\':returns: * \', field))\n            else:\n                lines.extend(self._format_block(\':returns: \', field))\n                if _type and use_rtype:\n                    lines.extend([\':rtype: %s\' % _type, \'\'])\n        if lines and lines[-1]:\n            lines.append(\'\')\n        return lines\n\n    def _parse_see_also_section(self, section: str) -> List[str]:\n        return self._parse_admonition(\'seealso\', section)\n\n    def _parse_warns_section(self, section: str) -> List[str]:\n        return self._format_fields(_(\'Warns\'), self._consume_fields())\n\n    def _parse_yields_section(self, section: str) -> List[str]:\n        fields = self._consume_returns_section()\n        return self._format_fields(_(\'Yields\'), fields)\n\n    def _partition_field_on_colon(self, line: str) -> Tuple[str, str, str]:\n        before_colon = []\n        after_colon = []\n        colon = \'\'\n        found_colon = False\n        for i, source in enumerate(_xref_or_code_regex.split(line)):\n            if found_colon:\n                after_colon.append(source)\n            else:\n                m = _single_colon_regex.search(source)\n                if (i % 2) == 0 and m:\n                    found_colon = True\n                    colon = source[m.start(): m.end()]\n                    before_colon.append(source[:m.start()])\n                    after_colon.append(source[m.end():])\n                else:\n                    before_colon.append(source)\n\n        return ("".join(before_colon).strip(),\n                colon,\n                "".join(after_colon).strip())\n\n    def _qualify_name(self, attr_name: str, klass: "Type") -> str:\n        if klass and \'.\' not in attr_name:\n            if attr_name.startswith(\'~\'):\n                attr_name = attr_name[1:]\n            try:\n                q = klass.__qualname__\n            except AttributeError:\n                q = klass.__name__\n            return \'~%s.%s\' % (q, attr_name)\n        return attr_name\n\n    def _strip_empty(self, lines: List[str]) -> List[str]:\n        if lines:\n            start = -1\n            for i, line in enumerate(lines):\n                if line:\n                    start = i\n                    break\n            if start == -1:\n                lines = []\n            end = -1\n            for i in reversed(range(len(lines))):\n                line = lines[i]\n                if line:\n                    end = i\n                    break\n            if start > 0 or end + 1 < len(lines):\n                lines = lines[start:end + 1]\n        return lines\n\n    def _lookup_annotation(self, _name: str) -> str:\n        if self._config.napoleon_attr_annotations:\n            if self._what in ("module", "class", "exception") and self._obj:\n                # cache the class annotations\n                if not hasattr(self, "_annotations"):\n                    localns = getattr(self._config, "autodoc_type_aliases", {})\n                    localns.update(getattr(\n                                   self._config, "napoleon_type_aliases", {}\n                                   ) or {})\n                    self._annotations = get_type_hints(self._obj, None, localns)\n                if _name in self._annotations:\n                    return stringify_annotation(self._annotations[_name])\n        # No annotation found\n        return ""\n\n\ndef _recombine_set_tokens(tokens: List[str]) -> List[str]:\n    token_queue = collections.deque(tokens)\n    keywords = ("optional", "default")\n\n    def takewhile_set(tokens):\n        open_braces = 0\n        previous_token = None\n        while True:\n            try:\n                token = tokens.popleft()\n            except IndexError:\n                break\n\n            if token == ", ":\n                previous_token = token\n                continue\n\n            if not token.strip():\n                continue\n\n            if token in keywords:\n                tokens.appendleft(token)\n                if previous_token is not None:\n                    tokens.appendleft(previous_token)\n                break\n\n            if previous_token is not None:\n                yield previous_token\n                previous_token = None\n\n            if token == "{":\n                open_braces += 1\n            elif token == "}":\n                open_braces -= 1\n\n            yield token\n\n            if open_braces == 0:\n                break\n\n    def combine_set(tokens):\n        while True:\n            try:\n                token = tokens.popleft()\n            except IndexError:\n                break\n\n            if token == "{":\n                tokens.appendleft("{")\n                yield "".join(takewhile_set(tokens))\n            else:\n                yield token\n\n    return list(combine_set(token_queue))\n\n\ndef _tokenize_type_spec(spec: str) -> List[str]:\n    def postprocess(item):\n        if _default_regex.match(item):\n            default = item[:7]\n            # can\'t be separated by anything other than a single space\n            # for now\n            other = item[8:]\n\n            return [default, " ", other]\n        else:\n            return [item]\n\n    tokens = list(\n        item\n        for raw_token in _token_regex.split(spec)\n        for item in postprocess(raw_token)\n        if item\n    )\n    return tokens\n\n\ndef _token_type(token: str, location: str = None) -> str:\n    def is_numeric(token):\n        try:\n            # use complex to make sure every numeric value is detected as literal\n            complex(token)\n        except ValueError:\n            return False\n        else:\n            return True\n\n    if token.startswith(" ") or token.endswith(" "):\n        type_ = "delimiter"\n    elif (\n            is_numeric(token) or\n            (token.startswith("{") and token.endswith("}")) or\n            (token.startswith(\'"\') and token.endswith(\'"\')) or\n            (token.startswith("\'") and token.endswith("\'"))\n    ):\n        type_ = "literal"\n    elif token.startswith("{"):\n        logger.warning(\n            __("invalid value set (missing closing brace): %s"),\n            token,\n            location=location,\n        )\n        type_ = "literal"\n    elif token.endswith("}"):\n        logger.warning(\n            __("invalid value set (missing opening brace): %s"),\n            token,\n            location=location,\n        )\n        type_ = "literal"\n    elif token.startswith("\'") or token.startswith(\'"\'):\n        logger.warning(\n            __("malformed string literal (missing closing quote): %s"),\n            token,\n            location=location,\n        )\n        type_ = "literal"\n    elif token.endswith("\'") or token.endswith(\'"\'):\n        logger.warning(\n            __("malformed string literal (missing opening quote): %s"),\n            token,\n            location=location,\n        )\n        type_ = "literal"\n    elif token in ("optional", "default"):\n        # default is not a official keyword (yet) but supported by the\n        # reference implementation (numpydoc) and widely used\n        type_ = "control"\n    elif _xref_regex.match(token):\n        type_ = "reference"\n    else:\n        type_ = "obj"\n\n    return type_\n\n\ndef _convert_numpy_type_spec(_type: str, location: str = None, translations: dict = {}) -> str:\n    def convert_obj(obj, translations, default_translation):\n        translation = translations.get(obj, obj)\n\n        # use :class: (the default) only if obj is not a standard singleton\n        if translation in _SINGLETONS and default_translation == ":class:":\n            default_translation = ":obj:"\n        elif translation == "..." and default_translation == ":class:":\n            # allow referencing the builtin ...\n            default_translation = ":obj:"\n\n        if _xref_regex.match(translation) is None:\n            translation = default_translation % translation\n\n        return translation\n\n    tokens = _tokenize_type_spec(_type)\n    combined_tokens = _recombine_set_tokens(tokens)\n    types = [\n        (token, _token_type(token, location))\n        for token in combined_tokens\n    ]\n\n    converters = {\n        "literal": lambda x: "%s" % x,\n        "obj": lambda x: convert_obj(x, translations, ":class:"),\n        "control": lambda x: "*%s*" % x,\n        "delimiter": lambda x: x,\n        "reference": lambda x: x,\n    }\n\n    converted = "".join(converters.get(type_)(token) for token, type_ in types)\n\n    return converted\n\n\nclass NumpyDocstring(GoogleDocstring):\n    """Convert NumPy style docstrings to reStructuredText.\n\n    Parameters\n    ----------\n    docstring : :obj: or :obj: of :obj:\n        The docstring to parse, given either as a string or split into\n        individual lines.\n    config: :obj: or :obj:\n        The configuration settings to use. If not given, defaults to the\n        config object on ; or if  is not given defaults to the\n        a new :class: object.\n\n\n    Other Parameters\n    ----------------\n    app : :class:, optional\n        Application object representing the Sphinx process.\n    what : :obj:, optional\n        A string specifying the type of the object to which the docstring\n        belongs. Valid values: "module", "class", "exception", "function",\n        "method", "attribute".\n    name : :obj:, optional\n        The fully qualified name of the object.\n    obj : module, class, exception, function, method, or attribute\n        The object to which the docstring belongs.\n    options : :class:, optional\n        The options given to the directive: an object with attributes\n        inherited_members, undoc_members, show_inheritance and noindex that\n        are True if the flag option of same name was given to the auto\n        directive.\n\n\n    Example\n    -------\n    >>> from sphinx.ext.napoleon import Config\n    >>> config = Config(napoleon_use_param=True, napoleon_use_rtype=True)\n    >>> docstring = \'\'\'One line summary.\n    ...\n    ... Extended description.\n    ...\n    ... Parameters\n    ... ----------\n    ... arg1 : int\n    ...     Description of \n    ... arg2 : str\n    ...     Description of \n    ... Returns\n    ... -------\n    ... str\n    ...     Description of return value.\n    ... \'\'\'\n    >>> print(NumpyDocstring(docstring, config))\n    One line summary.\n    <BLANKLINE>\n    Extended description.\n    <BLANKLINE>\n    :param arg1: Description of \n    :type arg1: int\n    :param arg2: Description of \n    :type arg2: str\n    <BLANKLINE>\n    :returns: Description of return value.\n    :rtype: str\n    <BLANKLINE>\n\n    Methods\n    -------\n    __str__()\n        Return the parsed docstring in reStructuredText format.\n\n        Returns\n        -------\n        str\n            UTF-8 encoded version of the docstring.\n\n    __unicode__()\n        Return the parsed docstring in reStructuredText format.\n\n        Returns\n        -------\n        unicode\n            Unicode version of the docstring.\n\n    lines()\n        Return the parsed lines of the docstring in reStructuredText format.\n\n        Returns\n        -------\n        list(str)\n            The lines of the docstring in a list.\n\n    """\n    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,\n                 app: Sphinx = None, what: str = \'\', name: str = \'\',\n                 obj: Any = None, options: Any = None) -> None:\n        self._directive_sections = [\'.. index::\']\n        super().__init__(docstring, config, app, what, name, obj, options)\n\n    def _get_location(self) -> str:\n        try:\n            filepath = inspect.getfile(self._obj) if self._obj is not None else None\n        except TypeError:\n            filepath = None\n        name = self._name\n\n        if filepath is None and name is None:\n            return None\n        elif filepath is None:\n            filepath = ""\n\n        return ":".join([filepath, "docstring of %s" % name])\n\n    def _escape_args_and_kwargs(self, name: str) -> str:\n        func = super()._escape_args_and_kwargs\n\n        if ", " in name:\n            return ", ".join(func(param) for param in name.split(", "))\n        else:\n            return func(name)\n\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n        line = next(self._line_iter)\n        if parse_type:\n            _name, _, _type = self._partition_field_on_colon(line)\n        else:\n            _name, _type = line, \'\'\n        _name, _type = _name.strip(), _type.strip()\n        _name = self._escape_args_and_kwargs(_name)\n\n        if parse_type and not _type:\n            _type = self._lookup_annotation(_name)\n\n        if prefer_type and not _type:\n            _type, _name = _name, _type\n\n        if self._config.napoleon_preprocess_types:\n            _type = _convert_numpy_type_spec(\n                _type,\n                location=self._get_location(),\n                translations=self._config.napoleon_type_aliases or {},\n            )\n\n        indent = self._get_indent(line) + 1\n        _desc = self._dedent(self._consume_indented_block(indent))\n        _desc = self.__class__(_desc, self._config).lines()\n        return _name, _type, _desc\n\n    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n        return self._consume_fields(prefer_type=True)\n\n    def _consume_section_header(self) -> str:\n        section = next(self._line_iter)\n        if not _directive_regex.match(section):\n            # Consume the header underline\n            next(self._line_iter)\n        return section\n\n    def _is_section_break(self) -> bool:\n        line1, line2 = self._line_iter.peek(2)\n        return (not self._line_iter.has_next() or\n                self._is_section_header() or\n                [\'\', \'\'] == [line1, line2] or\n                (self._is_in_section and\n                    line1 and\n                    not self._is_indented(line1, self._section_indent)))\n\n    def _is_section_header(self) -> bool:\n        section, underline = self._line_iter.peek(2)\n        section = section.lower()\n        if section in self._sections and isinstance(underline, str):\n            return bool(_numpy_section_regex.match(underline))\n        elif self._directive_sections:\n            if _directive_regex.match(section):\n                for directive_section in self._directive_sections:\n                    if section.startswith(directive_section):\n                        return True\n        return False\n\n    def _parse_see_also_section(self, section: str) -> List[str]:\n        lines = self._consume_to_next_section()\n        try:\n            return self._parse_numpydoc_see_also_section(lines)\n        except ValueError:\n            return self._format_admonition(\'seealso\', lines)\n\n    def _parse_numpydoc_see_also_section(self, content: List[str]) -> List[str]:\n        """\n        Derived from the NumpyDoc implementation of _parse_see_also.\n\n        See Also\n        --------\n        func_name : Descriptive text\n            continued text\n        another_func_name : Descriptive text\n        func_name1, func_name2, :meth:, func_name3\n\n        """\n        items = []\n\n        def parse_item_name(text: str) -> Tuple[str, str]:\n            """Match \':role:\' or \'name\'"""\n            m = self._name_rgx.match(text)\n            if m:\n                g = m.groups()\n                if g[1] is None:\n                    return g[3], None\n                else:\n                    return g[2], g[1]\n            raise ValueError("%s is not a item name" % text)\n\n        def push_item(name: str, rest: List[str]) -> None:\n            if not name:\n                return\n            name, role = parse_item_name(name)\n            items.append((name, list(rest), role))\n            del rest[:]\n\n        def translate(func, description, role):\n            translations = self._config.napoleon_type_aliases\n            if role is not None or not translations:\n                return func, description, role\n\n            translated = translations.get(func, func)\n            match = self._name_rgx.match(translated)\n            if not match:\n                return translated, description, role\n\n            groups = match.groupdict()\n            role = groups["role"]\n            new_func = groups["name"] or groups["name2"]\n\n            return new_func, description, role\n\n        current_func = None\n        rest = []  # type: List[str]\n\n        for line in content:\n            if not line.strip():\n                continue\n\n            m = self._name_rgx.match(line)\n            if m and line[m.end():].strip().startswith(\':\'):\n                push_item(current_func, rest)\n                current_func, line = line[:m.end()], line[m.end():]\n                rest = [line.split(\':\', 1)[1].strip()]\n                if not rest[0]:\n                    rest = []\n            elif not line.startswith(\' \'):\n                push_item(current_func, rest)\n                current_func = None\n                if \',\' in line:\n                    for func in line.split(\',\'):\n                        if func.strip():\n                            push_item(func, [])\n                elif line.strip():\n                    current_func = line\n            elif current_func is not None:\n                rest.append(line.strip())\n        push_item(current_func, rest)\n\n        if not items:\n            return []\n\n        # apply type aliases\n        items = [\n            translate(func, description, role)\n            for func, description, role in items\n        ]\n\n        lines = []  # type: List[str]\n        last_had_desc = True\n        for name, desc, role in items:\n            if role:\n                link = \':%s:\' % (role, name)\n            else:\n                link = \':obj:\' % name\n            if desc or last_had_desc:\n                lines += [\'\']\n                lines += [link]\n            else:\n                lines[-1] += ", %s" % link\n            if desc:\n                lines += self._indent([\' \'.join(desc)])\n                last_had_desc = True\n            else:\n                last_had_desc = False\n        lines += [\'\']\n\n        return self._format_admonition(\'seealso\', lines)\n', '/sphinx-doc__sphinx/test_napoleon.py': '\nimport sys\nfrom sphinx.ext.napoleon import Config\nfrom sphinx.ext.napoleon.docstring import NumpyDocstring\n\ndef test_other_params_formatting():\n    config = Config(napoleon_use_param=True)\n    docstring = \'\'\'One line summary.\n\n    Parameters\n    ----------\n    arg1 : int\n        Description of arg1\n    arg2 : str\n        Description of arg2\n\n    Other Parameters\n    ----------------\n    other1 : float\n        Description of other1\n    other2 : bool\n        Description of other2\n    \'\'\'\n    print(NumpyDocstring(docstring, config))\n\nif __name__ == "__main__":\n    test_other_params_formatting()\n\n'